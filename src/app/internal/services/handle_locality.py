from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from app.internal.services import response_processing
from app.internal.models.user import User
from app.internal.services.get_weather import get_weather
import aiohttp
import os
from dotenv import load_dotenv


load_dotenv()
WEATHER_API_KEY = os.environ['WEATHER_API_KEY']


async def handle_locality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    response = await get_weather(update.effective_message.text)
    #–¥–æ—Å—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–∫–∞
    if response.status == 404:
        text = '–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑ üò™'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        return ConversationHandler.END
    elif response.status != 200:
        text = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üò™'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        return ConversationHandler.END

    #—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º –∏ –≥–æ—Ä–æ–¥–æ–º
    user = User(id=update.effective_user.id, city=update.effective_message.text, chat_id=update.effective_chat.id)
    await user.asave()

    data = response.json_parsed
    text = response_processing.generate_recommendations(data)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    text = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–∫–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ  {data["name"]}? –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞/–Ω–µ—Ç.'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    context.user_data['city'] = data['name']
    return 1
